#!/bin/sh

# Use a higher priority to get started before NTP

LOG=/var/log/wifi-init.log

log_kmsg() {
    echo "wifi-init: $1" > /dev/kmsg
}

case "$1" in
    start)
        log_kmsg "Connecting to Wi-Fi..."
        xz -d /lib/modules/$(uname -r)/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko.xz >> $LOG 2>&1
        modprobe /lib/modules/$(uname -r)/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko >> $LOG 2>&1

        # Wait until wlan0 appears
        i=0
        while [ ! -d /sys/class/net/wlan0 ] && [ $i -lt 20 ]; do
            echo "Waiting for wlan0..." >> $LOG
            sleep 0.5
            i=$((i+1))
        done

        ip link set wlan0 up >> $LOG 2>&1
        wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant.conf >> $LOG 2>&1
        udhcpc -i wlan0 >> $LOG 2>&1

        # Wait until wlan0 has an IP
        i=0
        while [ $i -lt 20 ]; do
            if ip addr show wlan0 | grep -q "inet "; then
                log_kmsg "Got IP address on wlan0"
                break
            fi
            echo "Waiting for IP address..." >> $LOG
            sleep 1
            i=$((i+1))
        done

        echo "Sleeping 2 seconds to ensure network stack is ready..." >> $LOG
        sleep 2

        if ip route | grep -q "^default"; then
            log_kmsg "Default route is present"
        else
            log_kmsg "No default route found, skipping NTP sync"
            exit 1
        fi

        # Wait for resolv.conf to be populated by udhcpc
        i=0
        while [ $i -lt 10 ]; do
            if grep -q "^nameserver" /etc/resolv.conf; then
                log_kmsg "resolv.conf is populated"
                break
            fi
            echo "Waiting for DNS config..." >> $LOG
            sleep 1
            i=$((i+1))
        done
        ;;
    stop)
        log_kmsg "Stopping Wi-Fi"
        killall wpa_supplicant
        ;;
    *)
        echo "Usage: $0 {start|stop}"
        exit 1
        ;;
esac

exit 0

